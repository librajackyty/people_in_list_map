name: people_in_list_map
description: "Flutter project of Mobile Developer Programming Test"
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+1

environment:
  sdk: '>=3.2.5 <4.0.0'

scripts:
  # run is a default script. To use it, simply type
  # in the command line: "rps" - that's all!
  run: "flutter run -t lib/main.dart"
  # you can define more commands like this: "rps gen"
  gen: "flutter pub run build_runner watch --delete-conflicting-outputs"
  genoss: "flutter pub run flutter_oss_licenses:generate.dart"
  # and even nest them!
  buildoutput:
    # You can use hooks to! (and even nest them!)
    $before: flutter pub get
    $after: echo "Build done!"
    android:
      # rps build android apk
      apk: 
        $before: echo "Building android apk..."
        $script: "flutter build --release apk --flavor production"
      # rps build android appbundle
      appbundle: "flutter build --release appbundle --flavor production"
      # and so on...
  # too long command? no problem! define alias using reference syntax!
  bab: $buildoutput android appbundle
  # as simple as typing "rps baa"
  baa: $buildoutput android apk
  # some commands may vary from platform to platform
  # but that's not a problem
  clear:
    # use the $script key to define platform specific scripts
    $script:
      # define the default script
      $default: rm -rf ./app/cache
      # And different script for the windows platform.
      $windows: rd /s /q app\cache
      # now "rps clear" will work on any platform!

  dev: flutter run # -d <device_id>
  dev-fresh: flutter run --no-fast-start # -d <device_id>
  profile: flutter run --profile
  devices: flutter devices
  install: flutter pub get
  build: flutter pub run build_runner build --delete-conflicting-outputs
  watch: flutter pub run build_runner watch --delete-conflicting-outputs
  uninstall: adb shell && pm uninstall org.tether.tether # (sometimes doesn't uninstall when debugging?)
  format: flutter dartfmt --line-length=120 .
  test: flutter test

  build-release-ios: flutter build ipa  --release # open under xcworkspace, not xcodeproj
  build-release-macos: flutter pub run build_runner build --delete-conflicting-outputs && flutter build macos --release
  build-release-android: flutter pub run build_runner build --delete-conflicting-outputs && flutter build apk --release

  # mobile development commands
  setup-ios: pod install && flutter precache --ios
  clean-ios: xcrun simctl delete unavailable
  list-ios: xcrun simctl list devices
  boot-ios: xcrun simctl boot #<device_id>
  list-android: emulator -list-avds
  boot-android: emulator -avd #<device_id>
  inspect-android: adb shell && run-as org.tether.tether # cache inspection
  log-android: adb logcat ActivityManager:I flutter:I *:S

  # configuration and troubleshooting
  init-repo: git submodule update --init --recursive
  reset-xcode: defaults delete com.apple.dt.Xcode
  dev-tools: flutter pub global run devtools
  cache-clean: pub cache repair && flutter pub cache repair
  upgrade-deps: flutter pub upgrade --major-versions
  init-platform-dirs: flutter create --org org.tether.tether
  enable-desktop: flutter config --enable-macos-desktop --enable-linux-desktop # --no-enable-<type>-desktop

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter

  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.2
  provider: ^6.1.1
  shared_preferences: ^2.2.2
  page_transition: ^2.1.0
  auto_size_text: ^3.0.0
  delayed_display: ^2.0.0
  vs_scrollbar: ^1.0.0
  no_context_navigation: ^3.0.0
  http: ^1.2.0
  transparent_image: ^2.0.1
  cached_network_image: ^3.3.1

dev_dependencies:
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^2.0.0
  build_runner: ^2.4.8
  change_app_package_name: ^1.1.0
  launcher_name: ^1.0.2
  build_web_compilers: ^4.0.9

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

launcher_name:
  default: "People In ListMap"

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  # assets:
  #   - assets/
  #   - assets/i18n/
  #   - assets/images/
  #   - assets/lotties/
  #   - assets/sounds/

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/custom-fonts/#from-packages
