// Mocks generated by Mockito 5.4.4 from annotations
// in people_in_list_map/test/utils/formatter/personToJson.welltested_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;
import 'package:people_in_list_map/models/person.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeName_0 extends _i1.SmartFake implements _i2.Name {
  _FakeName_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocation_1 extends _i1.SmartFake implements _i2.Location {
  _FakeLocation_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Person].
///
/// See the documentation for Mockito's code generation for more information.
class MockPerson extends _i1.Mock implements _i2.Person {
  MockPerson() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  set id(String? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Name get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _FakeName_0(
          this,
          Invocation.getter(#name),
        ),
      ) as _i2.Name);

  @override
  set name(_i2.Name? _name) => super.noSuchMethod(
        Invocation.setter(
          #name,
          _name,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get email => (super.noSuchMethod(
        Invocation.getter(#email),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#email),
        ),
      ) as String);

  @override
  set email(String? _email) => super.noSuchMethod(
        Invocation.setter(
          #email,
          _email,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get picture => (super.noSuchMethod(
        Invocation.getter(#picture),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#picture),
        ),
      ) as String);

  @override
  set picture(String? _picture) => super.noSuchMethod(
        Invocation.setter(
          #picture,
          _picture,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Location get location => (super.noSuchMethod(
        Invocation.getter(#location),
        returnValue: _FakeLocation_1(
          this,
          Invocation.getter(#location),
        ),
      ) as _i2.Location);

  @override
  set location(_i2.Location? _location) => super.noSuchMethod(
        Invocation.setter(
          #location,
          _location,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [Name].
///
/// See the documentation for Mockito's code generation for more information.
class MockName extends _i1.Mock implements _i2.Name {
  MockName() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get last => (super.noSuchMethod(
        Invocation.getter(#last),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#last),
        ),
      ) as String);

  @override
  set last(String? _last) => super.noSuchMethod(
        Invocation.setter(
          #last,
          _last,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get first => (super.noSuchMethod(
        Invocation.getter(#first),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#first),
        ),
      ) as String);

  @override
  set first(String? _first) => super.noSuchMethod(
        Invocation.setter(
          #first,
          _first,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  String full() => (super.noSuchMethod(
        Invocation.method(
          #full,
          [],
        ),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.method(
            #full,
            [],
          ),
        ),
      ) as String);
}

/// A class which mocks [Location].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocation extends _i1.Mock implements _i2.Location {
  MockLocation() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set latitude(double? _latitude) => super.noSuchMethod(
        Invocation.setter(
          #latitude,
          _latitude,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set longitude(double? _longitude) => super.noSuchMethod(
        Invocation.setter(
          #longitude,
          _longitude,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
